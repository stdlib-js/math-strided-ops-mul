{
  "version": 3,
  "sources": ["../lib/meta.json", "../lib/dtypes.enum.json", "../lib/types.js", "../lib/data.js", "../lib/mul.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"nargs\": 10,\n  \"nin\": 2,\n  \"nout\": 1\n}\n", "[[14,15,11,12,17,4,6,1,5,7,2],[14,15,11,12,17,4,6,1,5,7,2],[14,15,11,12,17,4,6,1,5,7,2]]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar signatures = require( '@stdlib/strided-base-binary-dtype-signatures' );\nvar dtypes = require( './dtypes.enum.json' );\n\n\n// MAIN //\n\n/**\n* List of dtypes defining supported interface signatures.\n*\n* @private\n* @name types\n* @constant\n* @type {Array}\n*/\nvar types = signatures( dtypes[ 0 ], dtypes[ 1 ], dtypes[ 2 ], {\n\t'enums': true\n});\n\n\n// EXPORTS //\n\nmodule.exports = types;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar mul = require( '@stdlib/number-float64-base-mul' );\nvar cmul = require( '@stdlib/complex-float64-base-mul' );\nvar cmulf = require( '@stdlib/complex-float32-base-mul' );\nvar callbacks = require( '@stdlib/strided-base-binary-signature-callbacks' );\nvar types = require( './types.js' );\n\n\n// VARIABLES //\n\n// Define a callback table...\nvar table = {\n\t'default': mul,\n\t'complex64': cmulf,\n\t'complex128': cmul\n};\n\n\n// MAIN //\n\n/**\n* Binary callbacks to apply to strided arrays.\n*\n* @private\n* @name data\n* @constant\n* @type {Array}\n*/\nvar data = callbacks( table, types );\n\n\n// EXPORTS //\n\nmodule.exports = data;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar dispatch = require( '@stdlib/strided-dispatch' );\nvar binary = require( '@stdlib/strided-base-binary' );\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar types = require( './types.js' );\nvar meta = require( './meta.json' );\nvar data = require( './data.js' );\n\n\n// VARIABLES //\n\nvar fcn = dispatch( binary, types, data, meta.nargs, meta.nin, meta.nout );\n\n\n// MAIN //\n\n/**\n* Multiplies each element in a strided array `x` to a corresponding element in a strided array `y` and assigns the results to elements in a strided array `z`.\n*\n* @param {integer} N - number of indexed elements\n* @param {*} dtypeX - `x` data type\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {*} dtypeY - `y` data type\n* @param {Collection} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {*} dtypeZ - `z` data type\n* @param {Collection} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} fourth argument must be an integer\n* @throws {TypeError} sixth argument must be an array-like object\n* @throws {TypeError} seventh argument must be an integer\n* @throws {TypeError} ninth argument must be an array-like object\n* @throws {TypeError} tenth argument must be an integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} third argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} sixth argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} ninth argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {Collection} `z`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* mul( x.length, 'float64', x, 1, 'float64', y, 1, 'float64', z, 1 );\n* // z => <Float64Array>[ -2.0, 2.0, 9.0, -20.0, 20.0 ]\n*/\nfunction mul( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n\treturn fcn( N, resolve( dtypeX ), x, strideX, resolve( dtypeY ), y, strideY, resolve( dtypeZ ), z, strideZ );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mul;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar dispatch = require( '@stdlib/strided-dispatch' );\nvar binary = require( '@stdlib/strided-base-binary' ).ndarray;\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar types = require( './types.js' );\nvar meta = require( './meta.json' );\nvar data = require( './data.js' );\n\n\n// VARIABLES //\n\nvar fcn = dispatch( binary, types, data, meta.nargs+meta.nin+meta.nout, meta.nin, meta.nout );\n\n\n// MAIN //\n\n/**\n* Multiplies each element in a strided array `x` to a corresponding element in a strided array `y` and assigns the results to elements in a strided array `z`.\n*\n* @param {integer} N - number of indexed elements\n* @param {*} dtypeX - `x` data type\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {*} dtypeY - `y` data type\n* @param {Collection} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {*} dtypeZ - `z` data type\n* @param {Collection} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} fourth argument must be an integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} seventh argument must be an array-like object\n* @throws {TypeError} eighth argument must be an integer\n* @throws {TypeError} ninth argument must be a nonnegative integer\n* @throws {TypeError} eleventh argument must be an array-like object\n* @throws {TypeError} twelfth argument must be an integer\n* @throws {TypeError} thirteenth argument must be a nonnegative integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} third argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} seventh argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} eleventh argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {Collection} `z`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* mul( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0, 'float64', z, 1, 0 );\n* // z => <Float64Array>[ -2.0, 2.0, 9.0, -20.0, 20.0 ]\n*/\nfunction mul( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ ) {\n\treturn fcn( N, resolve( dtypeX ), x, strideX, offsetX, resolve( dtypeY ), y, strideY, offsetY, resolve( dtypeZ ), z, strideZ, offsetZ );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mul;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setProps = require( '@stdlib/strided-base-meta-data-props' );\nvar meta = require( './meta.json' );\nvar types = require( './types.js' );\nvar mul = require( './mul.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( mul, 'ndarray', ndarray );\nsetProps( meta, types, mul, false );\nsetProps( meta, types, mul.ndarray, true );\n\n\n// EXPORTS //\n\nmodule.exports = mul;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Element-wise multiplication of two strided arrays.\n*\n* @module @stdlib/math-strided-ops-mul\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var mul = require( '@stdlib/math-strided-ops-mul' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* mul( x.length, 'float64', x, 1, 'float64', y, 1, 'float64', z, 1 );\n* // z => <Float64Array>[ -2.0, 2.0, 9.0, -20.0, 20.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var mul = require( '@stdlib/math-strided-ops-mul' );\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* mul.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0, 'float64', z, 1, 0 );\n* // z => <Float64Array>[ -2.0, 2.0, 9.0, -20.0, 20.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar javascript = require( './main.js' );\n\n\n// MAIN //\n\nvar main;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( tmp instanceof Error ) {\n\tmain = javascript;\n} else {\n\tmain = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_meta", "__commonJSMin", "exports", "module", "require_dtypes_enum", "__commonJSMin", "exports", "module", "require_types", "__commonJSMin", "exports", "module", "signatures", "dtypes", "types", "require_data", "__commonJSMin", "exports", "module", "mul", "cmul", "cmulf", "callbacks", "types", "table", "data", "require_mul", "__commonJSMin", "exports", "module", "dispatch", "binary", "resolve", "types", "meta", "data", "fcn", "mul", "N", "dtypeX", "x", "strideX", "dtypeY", "y", "strideY", "dtypeZ", "z", "strideZ", "require_ndarray", "__commonJSMin", "exports", "module", "dispatch", "binary", "resolve", "types", "meta", "data", "fcn", "mul", "N", "dtypeX", "x", "strideX", "offsetX", "dtypeY", "y", "strideY", "offsetY", "dtypeZ", "z", "strideZ", "offsetZ", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setProps", "meta", "types", "mul", "ndarray", "join", "tryRequire", "javascript", "main", "tmp"]
}
